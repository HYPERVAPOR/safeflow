"""
MCP 协议 - 统一漏洞模型 Schema
"""
from datetime import datetime
from enum import Enum
from typing import Optional, List, Dict, Any
from pydantic import BaseModel, Field


class SeverityLevel(str, Enum):
    """严重度等级"""
    CRITICAL = "CRITICAL"
    HIGH = "HIGH"
    MEDIUM = "MEDIUM"
    LOW = "LOW"
    INFO = "INFO"


class Exploitability(str, Enum):
    """可利用性"""
    EASY = "EASY"
    MODERATE = "MODERATE"
    HARD = "HARD"
    UNKNOWN = "UNKNOWN"


class VerificationStatus(str, Enum):
    """验证状态"""
    PENDING = "PENDING"           # 待验证
    VERIFIED = "VERIFIED"         # 已验证为真实漏洞
    FALSE_POSITIVE = "FALSE_POSITIVE"  # 误报
    WONT_FIX = "WONT_FIX"        # 不修复


class VulnerabilityType(BaseModel):
    """漏洞类型信息"""
    name: str = Field(
        description="漏洞名称",
        example="SQL Injection"
    )
    cwe_id: Optional[int] = Field(
        default=None,
        description="CWE 分类 ID",
        example=89
    )
    owasp_category: Optional[str] = Field(
        default=None,
        description="OWASP 分类",
        example="A03:2021 - Injection"
    )


class Location(BaseModel):
    """漏洞位置信息"""
    file_path: str = Field(
        description="文件路径（相对于项目根目录）",
        example="src/api/users.py"
    )
    function_name: Optional[str] = Field(
        default=None,
        description="函数/方法名",
        example="get_user_by_id"
    )
    class_name: Optional[str] = Field(
        default=None,
        description="类名",
        example="UserController"
    )
    line_start: int = Field(
        description="起始行号",
        example=42
    )
    line_end: int = Field(
        description="结束行号",
        example=45
    )
    column_start: Optional[int] = Field(
        default=None,
        description="起始列号"
    )
    column_end: Optional[int] = Field(
        default=None,
        description="结束列号"
    )
    code_snippet: Optional[str] = Field(
        default=None,
        description="相关代码片段"
    )


class Severity(BaseModel):
    """严重度信息"""
    level: SeverityLevel = Field(
        description="严重度等级"
    )
    score: Optional[float] = Field(
        default=None,
        ge=0.0,
        le=10.0,
        description="CVSS 分数 (0-10)"
    )
    exploitability: Exploitability = Field(
        default=Exploitability.UNKNOWN,
        description="可利用性评估"
    )


class Confidence(BaseModel):
    """置信度信息"""
    score: int = Field(
        ge=0,
        le=100,
        description="置信度百分比 (0-100)",
        example=85
    )
    reason: Optional[str] = Field(
        default=None,
        description="置信度评估依据",
        example="多工具检测一致"
    )


class SourceTool(BaseModel):
    """来源工具信息"""
    tool_id: str = Field(
        description="工具标识",
        example="semgrep-1.50.0"
    )
    rule_id: str = Field(
        description="触发的规则 ID",
        example="python.lang.security.audit.sql-injection"
    )
    original_severity: str = Field(
        description="工具原始严重度",
        example="ERROR"
    )
    raw_output: Dict[str, Any] = Field(
        description="工具原始输出（JSON 格式）"
    )


class Description(BaseModel):
    """漏洞描述信息"""
    summary: str = Field(
        description="简短描述",
        example="检测到潜在的 SQL 注入漏洞"
    )
    detail: Optional[str] = Field(
        default=None,
        description="详细说明"
    )
    impact: Optional[str] = Field(
        default=None,
        description="潜在影响",
        example="攻击者可能获取或修改数据库数据"
    )
    remediation: Optional[str] = Field(
        default=None,
        description="修复建议",
        example="使用参数化查询替代字符串拼接"
    )


class VulnerabilityMetadata(BaseModel):
    """漏洞元数据"""
    detected_at: datetime = Field(
        default_factory=datetime.now,
        description="检测时间"
    )
    language: Optional[str] = Field(
        default=None,
        description="代码语言",
        example="python"
    )
    tags: List[str] = Field(
        default=[],
        description="标签列表",
        example=["security", "injection", "database"]
    )
    references: List[str] = Field(
        default=[],
        description="外部参考链接",
        example=["https://cwe.mitre.org/data/definitions/89.html"]
    )


class Verification(BaseModel):
    """验证信息"""
    status: VerificationStatus = Field(
        default=VerificationStatus.PENDING,
        description="验证状态"
    )
    verified_at: Optional[datetime] = Field(
        default=None,
        description="验证时间"
    )
    verified_by: Optional[str] = Field(
        default=None,
        description="验证人或系统",
        example="auto_verifier_v1"
    )


class UnifiedVulnerability(BaseModel):
    """统一漏洞模型"""
    vulnerability_id: str = Field(
        description="平台生成的唯一 ID",
        example="vuln_abc123xyz"
    )
    scan_session_id: str = Field(
        description="所属扫描会话 ID",
        example="scan_20250115_001"
    )
    
    vulnerability_type: VulnerabilityType
    location: Location
    severity: Severity
    confidence: Confidence
    source_tool: SourceTool
    description: Description
    metadata: VulnerabilityMetadata
    verification: Verification

    class Config:
        json_schema_extra = {
            "example": {
                "vulnerability_id": "vuln_abc123xyz",
                "scan_session_id": "scan_20250115_001",
                "vulnerability_type": {
                    "name": "SQL Injection",
                    "cwe_id": 89,
                    "owasp_category": "A03:2021 - Injection"
                },
                "location": {
                    "file_path": "src/api/users.py",
                    "function_name": "get_user_by_id",
                    "class_name": "UserController",
                    "line_start": 42,
                    "line_end": 45,
                    "code_snippet": "query = f\"SELECT * FROM users WHERE id = {user_id}\""
                },
                "severity": {
                    "level": "HIGH",
                    "score": 8.5,
                    "exploitability": "EASY"
                },
                "confidence": {
                    "score": 90,
                    "reason": "直接检测到 SQL 拼接模式"
                },
                "source_tool": {
                    "tool_id": "semgrep-1.50.0",
                    "rule_id": "python.lang.security.audit.sql-injection",
                    "original_severity": "ERROR",
                    "raw_output": {}
                },
                "description": {
                    "summary": "检测到潜在的 SQL 注入漏洞",
                    "detail": "用户输入未经验证直接拼接到 SQL 查询中",
                    "impact": "攻击者可能获取或修改数据库数据",
                    "remediation": "使用参数化查询替代字符串拼接"
                },
                "metadata": {
                    "detected_at": "2025-01-15T10:30:00Z",
                    "language": "python",
                    "tags": ["security", "injection", "database"],
                    "references": ["https://cwe.mitre.org/data/definitions/89.html"]
                },
                "verification": {
                    "status": "PENDING",
                    "verified_at": None,
                    "verified_by": None
                }
            }
        }


# 严重度映射工具函数
def map_severity_to_unified(original_severity: str, tool_type: str) -> SeverityLevel:
    """
    将工具原生严重度映射到统一等级
    
    Args:
        original_severity: 工具原生严重度字符串
        tool_type: 工具类型
    
    Returns:
        统一的严重度等级
    """
    severity_upper = original_severity.upper()
    
    # Semgrep 映射
    if tool_type == "SAST":
        if severity_upper in ["ERROR", "CRITICAL"]:
            return SeverityLevel.CRITICAL
        elif severity_upper in ["WARNING", "HIGH"]:
            return SeverityLevel.HIGH
        elif severity_upper in ["INFO", "MEDIUM"]:
            return SeverityLevel.MEDIUM
        elif severity_upper in ["LOW"]:
            return SeverityLevel.LOW
    
    # Syft/CVE 映射
    elif tool_type == "SCA":
        if severity_upper in ["CRITICAL"]:
            return SeverityLevel.CRITICAL
        elif severity_upper in ["HIGH"]:
            return SeverityLevel.HIGH
        elif severity_upper in ["MEDIUM", "MODERATE"]:
            return SeverityLevel.MEDIUM
        elif severity_upper in ["LOW"]:
            return SeverityLevel.LOW
    
    # 默认为 MEDIUM
    return SeverityLevel.MEDIUM

