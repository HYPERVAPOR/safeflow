# SafeFlow .gitignore

# ===========================================
# Python
# ===========================================

# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
#pdm.lock
#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it
#   in version control.
#   https://pdm.fming.dev/#use-with-ide
.pdm.toml

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

# ===========================================
# SafeFlow 特定
# ===========================================

# 配置文件（包含敏感信息）
config.py
.env
.env.local
.env.production

# 扫描结果和证据链
results/
demo_results/
evidence/
logs/

# 工作目录
workspace/
temp/
tmp/

# 工具缓存
.cache/
tool_cache/

# 数据库文件
*.db
*.sqlite
*.sqlite3

# 上传的文件
uploads/
downloads/

# 备份文件
*.bak
*.backup
*.old

# ===========================================
# IDE 和编辑器
# ===========================================

# VSCode
.vscode/
*.code-workspace

# PyCharm
#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can
#  be added to the global gitignore or merged into this project gitignore.  For a PyCharm
#  project, it is recommended to include the following files:
#  .idea/
#  .idea/**/workspace.xml
#  .idea/**/tasks.xml
#  .idea/**/usage.statistics.xml
#  .idea/**/dictionaries
#  .idea/**/shelf
.idea/

# Sublime Text
*.sublime-project
*.sublime-workspace

# Vim
*.swp
*.swo
*~

# Emacs
*~
\#*\#
/.emacs.desktop
/.emacs.desktop.lock
*.elc
auto-save-list
tramp
.\#*

# ===========================================
# 操作系统
# ===========================================

# macOS
.DS_Store
.AppleDouble
.LSOverride
Icon
._*
.DocumentRevisions-V100
.fseventsd
.Spotlight-V100
.TemporaryItems
.Trashes
.VolumeIcon.icns
.com.apple.timemachine.donotpresent
.AppleDB
.AppleDesktop
Network Trash Folder
Temporary Items
.apdisk

# Windows
Thumbs.db
Thumbs.db:encryptable
ehthumbs.db
ehthumbs_vista.db
*.tmp
*.temp
Desktop.ini
$RECYCLE.BIN/
*.cab
*.msi
*.msix
*.msm
*.msp
*.lnk

# Linux
*~
.fuse_hidden*
.directory
.Trash-*
.nfs*

# ===========================================
# 安全工具相关
# ===========================================

# Semgrep 缓存
.semgrep/

# Syft 缓存
.syft/

# 其他安全工具缓存
.trivy/
.grype/
.bandit/

# 扫描报告（敏感信息）
*.sarif
*.json
!package.json
!package-lock.json
!tsconfig.json
!*.example.json

# 日志文件
*.log
*.out
*.err

# ===========================================
# 容器和虚拟化
# ===========================================

# Docker
.dockerignore
docker-compose.override.yml

# Vagrant
.vagrant/

# ===========================================
# 其他
# ===========================================

# 压缩文件
*.7z
*.dmg
*.gz
*.iso
*.jar
*.rar
*.tar
*.zip

# 临时文件
*.tmp
*.temp
*.swp
*.swo

# 许可证文件（如果包含敏感信息）
# LICENSE.key
# LICENSE.private

# 测试数据
test_data/
sample_data/
mock_data/

# 性能分析文件
*.prof
*.pstats

# 内存转储
*.dump
*.dmp

# 核心转储
core
core.*

# 锁文件（根据项目需要选择是否忽略）
# poetry.lock
# Pipfile.lock
# yarn.lock
# package-lock.json

# 本地开发配置
local_config.py
dev_config.py
test_config.py

# 文档构建输出
docs/build/
docs/_build/
site/

# Jupyter Notebook 检查点
.ipynb_checkpoints/

# 模型文件（如果很大）
*.pkl
*.pickle
*.model
*.h5
*.hdf5

# 数据文件
*.csv
*.xlsx
*.xls
*.parquet
*.feather

# 图片文件（如果不需要版本控制）
# *.png
# *.jpg
# *.jpeg
# *.gif
# *.svg
# *.ico

# 字体文件
*.ttf
*.otf
*.woff
*.woff2

# 音频/视频文件
*.mp3
*.mp4
*.avi
*.mov
*.wav

# 二进制文件
*.exe
*.dll
*.so
*.dylib

# 系统文件
.DS_Store
Thumbs.db

# 备份文件
*.bak
*.backup
*.old
*.orig

# 编辑器的临时文件
*~
.#*
\#*#
*.swp
*.swo

# 项目特定的忽略文件
# 在这里添加项目特定的忽略规则

# 示例：忽略特定目录
# sensitive_data/
# private_keys/
# user_uploads/

# 示例：忽略特定文件类型
# *.secret
# *.key
# *.pem
# *.crt

# 示例：忽略特定模式的文件
# *-backup.*
# *-test.*
# *-dev.*

# 示例：忽略特定大小的文件（需要 git-lfs 或手动处理）
# *.large
# *.huge

# 注意：某些文件可能需要使用 Git LFS 而不是完全忽略
# 例如：大型模型文件、数据集等
# 使用 git lfs track "*.large" 来跟踪大文件

# ===========================================
# 注释说明
# ===========================================

# 这个 .gitignore 文件包含了：
# 1. Python 项目的标准忽略规则
# 2. SafeFlow 项目特定的忽略规则
# 3. 常见 IDE 和编辑器的忽略规则
# 4. 操作系统相关的忽略规则
# 5. 安全工具相关的忽略规则
# 6. 其他常见的忽略规则

# 使用说明：
# - 取消注释（删除 #）来启用某些忽略规则
# - 添加项目特定的忽略规则到文件末尾
# - 定期检查和更新这个文件

# 重要提醒：
# - 不要忽略重要的配置文件模板
# - 不要忽略必要的依赖文件
# - 对于大型文件，考虑使用 Git LFS
# - 定期审查忽略的文件，确保没有意外忽略重要内容
